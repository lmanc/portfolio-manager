[project]
name = "portfoliomanager"
description = "A portfolio manager project that provides insights and rebalancing strategies for an investment portfolio. The project incorporates unit testing and follows a test-driven development approach."
readme = "README.md"
requires-python = ">=3.10"
version = "0.1"
authors = [
    { name = "Luca Mancusi", email = "luca.mancusi@protonmail.ch" },
    { name = "Moise Medici", email = "moise.medici@gmail.com" },
]
dependencies = [
    "pandas>=2.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "ruff>=0.1.2",
]

[tool.ruff]
# Include Jupyter notebooks
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# PEP8 all over the way
line-length = 79 # Used by both linter and E501
indent-width = 4

[tool.ruff.lint.pycodestyle]
max-doc-length = 72

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C4",   # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
    "N",    # pep8-naming
    "D",    # pydocstyle
    "A",    # flake8-builtins
    "EM",   # flake8-errmsg
    "INP",  # flake8-no-pep420
    "PT",   # flake8-pytest-style
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "PD",   # pandas-vet
    "SLF",  # flake8-self
    "PTH",  # flake8-use-pathlib
    "FURB", # refurb
    "PERF", # Perflint
    "FLY",  # flynt
    "RUF",  # Ruff-specific rules
]
ignore = [
    "E501", "W505", "PD901", #TODO
    "W191",  # indentation contains tabs
    "D100",  # missing docstring in public module
    "D104",  # missing docstring in public package
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.extend-per-file-ignores]
"tests/*" = [
    "N802",   # invalid-function-name
    "D",      # pydocstyle
    "INP001", # implicit-namespace-package
    "SLF001", # private-member-access
]


[tool.ruff.format]
# Use single quotes for strings.
quote-style = "single"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.pydocstyle]
convention = "google"
